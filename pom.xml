<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.dream.springbootframe</groupId>
	<artifactId>com.dream.springbootframe</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>com.dream.springbootframe</name>
	<url>http://maven.apache.org</url>

	<!-- 继承springboot的默认 -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>8</java.version>
		<!--以下两项需要如果不配置，解析themleaft 会有问题-->
		<!--<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
		<thymeleaf-layout-dialect.version>2.0.5</thymeleaf-layout-dialect.version>-->
	</properties>

	<dependencies>
		<!-- 为Web应用程序添加典型的依赖项 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<!--排除指定包-->
			<!--<exclusions>
				<exclusion>
					<groupId>com.fasterxml.jackson.core</groupId>
					<artifactId>jackson-databind</artifactId>
				</exclusion>
			</exclusions>-->
		</dependency>

		<!-- Developer tools Spring Boot包含一组附加的开发期工具。 -->
        <!-- 注意，生产环境下（java -jar或者通过特定的类加载器启动），这些开发工具自动被禁止。
			上面的 <optional>true</optional> 是一个最佳实践，可以有效阻止用于其他模块。
			如果想确保生产Build中不包含devtools，可以使用excludeDevtools build property。--> 
        <dependency>
	        <groupId>org.springframework.boot</groupId>
	        <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
	        <optional>true</optional>
    	</dependency> 

		<!-- 引入mysql连接类和连接池 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.0.29</version>
		</dependency>


		<!-- mybatis 引入 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>

		<!--data-->
		<dependency>
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-commons</artifactId>
		</dependency>

		<!-- cache引入 缓存 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<!-- 引入thymeleaf 模板 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- 引入el -->
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-el</artifactId>
		</dependency>

		<!-- 引入validator 表单验证 -->
		<!--<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
		</dependency>-->

		<!-- 引入mail (邮件) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-mail</artifactId>
		</dependency>
		
		<!-- poi引入 -->
		<dependency>
		  <groupId>org.apache.poi</groupId>
		  <artifactId>poi</artifactId>
		  <version>3.15</version>
		</dependency>
		<dependency>
		  <groupId>org.apache.poi</groupId>
		  <artifactId>poi-examples</artifactId>
		  <version>3.14</version>
		</dependency>
		<dependency>
		  <groupId>org.apache.poi</groupId>
		  <artifactId>poi-excelant</artifactId>
		  <version>3.14</version>
		</dependency>
		<dependency>
		  <groupId>org.apache.poi</groupId>
		  <artifactId>poi-ooxml</artifactId>
		  <version>3.15</version>
		</dependency>
		<dependency>
		  <groupId>org.apache.poi</groupId>
		  <artifactId>poi-ooxml-schemas</artifactId>
		  <version>3.15</version>
		</dependency>
		<dependency>
		  <groupId>poi</groupId>
		  <artifactId>poi-scratchpad</artifactId>
		  <version>2.5.1-final-20040804</version>
		</dependency>
		<dependency>
		  <groupId>fr.opensagres.xdocreport</groupId>
		  <artifactId>org.apache.poi.xwpf.converter.xhtml</artifactId>
		  <version>1.0.5</version>
		</dependency>


		<!--<dependency>
			<groupId>org.json</groupId>
			<artifactId>json</artifactId>
		</dependency>-->

		<!--file Utils-->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-io</artifactId>
			<version>1.3.2</version>
		</dependency>

		<!--解析Xml-->
		<dependency>
			<groupId>jdom</groupId>
			<artifactId>jdom</artifactId>
			<version>1.1</version>
		</dependency>
		<!--解析地址为img-->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
			<version>3.3.0</version>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
			<version>3.3.0</version>
		</dependency>

		<!--httpUtil-->
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpmime</artifactId>
		</dependency>

		<!--lombok-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
            <optional>true</optional>
		</dependency>

		<!--webSocket-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!--jpa-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- netty -->
		<dependency>
			<groupId>io.netty</groupId>
			<artifactId>netty-all</artifactId>
			<version>5.0.0.Alpha1</version>
		</dependency>

		<!-- gson 与springboot内ObjectMapper冲突-->
		<!--<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.3</version>
		</dependency>-->

		<!-- guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>19.0</version>
		</dependency>
        <!--<dependency>
            <groupId>org.jetbrains</groupId>
            <artifactId>annotations</artifactId>
            <version>RELEASE</version>
        </dependency>-->

		<!--spring 安全控制-->
		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>-->

		<!--JMS-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jms</artifactId>
		</dependency>
		<!--Apache ActiveMQ-->
		<dependency>
			<groupId>org.apache.activemq</groupId>
			<artifactId>activemq-broker</artifactId>
			<version>5.15.4</version>
		</dependency>

		<!--RabbitMQ(AMQP)-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

		<!--覆盖默认的内置tomcat-->
		<!--<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>-->

		<dependency>
			<groupId>com.graphql-java</groupId>
			<artifactId>graphql-java</artifactId>
			<version>8.0</version>
		</dependency>

    </dependencies>

	<build>
        <plugins>
        
        	<!-- 作为可执行JAR的包 在生产环境下可以使用(java -jar *.jar)
        		在项目目录下在cmd 输入mvn package 可以打成可运行的jar -->
           <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
			    <configuration>
					<!--配置了<fork>true</fork>后在修改java文件后也就支持了热启动，不过这种方式是属于项目重启（速度比较快的项目重启），
			   		会清空session中的值，也就是如果有用户登陆的话，项目重启后需要重新登陆。-->
				   <fork>true</fork>
					<!--注册为Linux的服务-->
					<!--打成jar包-->
					<!--1.init.d部署
						注册服务:sudo ln -s jar的路径 /etc/init.d/你要起的服务名
						启动服务:service 服务名 start
						停止服务:service 服务名 stop
						服务状态:service 服务名 status
						开机启动:chkconfig 服务名 on -->
					<!--2.systemd部署
						在/etc/sysemd/system/目录下创建文件 服务名.service
						内容:
							[Unit]
							Description = 服务名
							After = syslog.target
							[Service]
							ExecStart = jdk路径 -jar jar包路径
							[Install]
							WantedBy = multi-user.target
						启动服务:systemctl start 服务名 或 systemctl start 服务名.service
						停止服务:systemctl stop 服务名 或 systemctl stop 服务名.service
						服务状态:systemctl status 服务名 或 systemctl status 服务名.service
						开机启动:systemctl enbale 服务名 或 systemctl enbale 服务名.service
						项目日志:journalctl -u 服务名 或 journalctl -u 服务名.service
					-->
					<!--<executable>true</executable>-->
			    </configuration>
            </plugin>
            
            <!-- 自动重启 
            	使用spring-boot-devtools模块的应用，当classpath中的文件有改变时，会自动重启！ - 就是说，默认会监视classpath入口。
				静态资源和视图模板不需要重启！
				注意，不同的IDE有不同的表现，例如Eclipse中只要改变了文件并保存，那就会导致classpath中的内容改变。而Intellij IDEA则需要 Build #Make Project。
				可以通过build plugin启动应用，只要开启了forking支持，因为Devtools需要一个隔离的classloader才能运行正常。Maven下要这样开启： -->
			<!-- <plugin>
	            <groupId>org.springframework.boot</groupId>
	            <artifactId>spring-boot-maven-plugin</artifactId>
	            <configuration>
	                <fork>true</fork>
	            </configuration>
        	</plugin> -->
            
            <!-- springboot远程调试 -->
           <!--  <plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<jvmArguments>
						-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005
					</jvmArguments>
				</configuration>
			</plugin> -->
            
        </plugins>
    </build>
</project>
